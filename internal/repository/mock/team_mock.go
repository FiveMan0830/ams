// Code generated by MockGen. DO NOT EDIT.
// Source: ssl-gitlab.csie.ntut.edu.tw/ois/ois-project/ams/internal/repository (interfaces: TeamRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	internal "ssl-gitlab.csie.ntut.edu.tw/ois/ois-project/ams/internal"
	model "ssl-gitlab.csie.ntut.edu.tw/ois/ois-project/ams/internal/model"
)

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// AddTeam mocks base method.
func (m *MockTeamRepository) AddTeam(arg0 *model.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeam indicates an expected call of AddTeam.
func (mr *MockTeamRepositoryMockRecorder) AddTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeam", reflect.TypeOf((*MockTeamRepository)(nil).AddTeam), arg0)
}

// GetTeam mocks base method.
func (m *MockTeamRepository) GetTeam(arg0 string) (*model.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0)
	ret0, _ := ret[0].(*model.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamRepositoryMockRecorder) GetTeam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamRepository)(nil).GetTeam), arg0)
}

// GetTeamMembersWithRole mocks base method.
func (m *MockTeamRepository) GetTeamMembersWithRole(arg0 string) ([]*internal.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembersWithRole", arg0)
	ret0, _ := ret[0].([]*internal.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembersWithRole indicates an expected call of GetTeamMembersWithRole.
func (mr *MockTeamRepositoryMockRecorder) GetTeamMembersWithRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembersWithRole", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamMembersWithRole), arg0)
}
